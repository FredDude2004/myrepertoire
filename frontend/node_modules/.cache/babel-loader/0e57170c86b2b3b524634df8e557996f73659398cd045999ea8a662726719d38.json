{"ast":null,"code":"import arbitor from \"../src/arbiter/arbiter.js\";\nimport { useAppContext } from \"../src/contexts/Context.js\";\nimport { generateCandidates } from \"../src/reducer/actions/move.js\";\nexport const getCharacter = file => String.fromCharCode(file + 96);\nexport const createPosition = () => {\n  const position = new Array(8).fill(\"\").map(x => new Array(8).fill(\"\"));\n  for (let i = 0; i < 8; i++) {\n    // position[6][i] = \"bp\";\n    // position[1][i] = \"wp\";\n  }\n\n  // position[0][0] = \"wr\";\n  // position[0][1] = \"wn\";\n  // position[0][2] = \"wb\";\n  // position[0][3] = \"wq\";\n  // position[0][4] = \"wk\";\n  // position[0][5] = \"wb\";\n  // position[0][6] = \"wn\";\n  // position[0][7] = \"wr\";\n  //\n  // position[7][0] = \"br\";\n  // position[7][1] = \"bn\";\n  // position[7][2] = \"bb\";\n  // position[7][3] = \"bq\";\n  // position[7][4] = \"bk\";\n  // position[7][5] = \"bb\";\n  // position[7][6] = \"bn\";\n  // position[7][7] = \"br\";\n\n  position[0][0] = \"bk\";\n  position[0][7] = \"wk\";\n  position[3][2] = \"wn\";\n  position[3][6] = \"wn\";\n  position[5][2] = \"wn\";\n  position[5][6] = \"wn\";\n  return position;\n};\nexport const copyPosition = position => {\n  const newPosition = new Array(8).fill(\"\").map(x => new Array(8).fill(\"\"));\n  for (let rank = 0; rank < position.length; rank++) {\n    for (let file = 0; file < position[0].length; file++) {\n      newPosition[rank][file] = position[rank][file];\n    }\n  }\n  return newPosition;\n};\nexport const areSameColorTiles = (coords1, coords2) => (coords1.x + coords1.y) % 2 === coords2.x + coords2.y;\nexport const findPieceCoords = (position, type) => {\n  let results = [];\n  position.forEach((rank, i) => {\n    rank.forEach((pos, j) => {\n      if (pos === type) results.push({\n        x: i,\n        y: j\n      });\n    });\n  });\n  return results;\n};\nexport const getNewMoveNotation = _ref => {\n  let {\n    piece,\n    rank,\n    file,\n    x,\n    y,\n    position,\n    previousPosition,\n    promotesTo\n  } = _ref;\n  let note = \"\";\n  const takes = position[x][y];\n  rank = Number(rank);\n  file = Number(file);\n  if (piece[1] === \"k\" && Math.abs(file - y) === 2) {\n    if (file < y) return \"O-O\";else return \"O-O-O\";\n  }\n  if (piece[1] !== \"p\") {\n    note += disambiguateMove(piece, position, previousPosition, rank, file, x, y, note, takes);\n  } else if (rank !== x && file !== y) {\n    note += getCharacter(file + 1) + \"x\";\n  }\n  note += getCharacter(y + 1) + (x + 1);\n  if (promotesTo) note += \"=\" + promotesTo.toUpperCase();\n  return note;\n};\nexport const disambiguateMove = (piece, position, previousPosition, currX, currY, toX, toY, note, takes) => {\n  let ambiguousPieces = [];\n  for (let rank = 0; rank < 8; rank++) {\n    for (let file = 0; file < 8; file++) {\n      if (position[rank][file] === \"\" || rank === currX && file === currY) {\n        continue;\n      } else if (position[rank][file] === piece) {\n        const pieceAtPositionValidMoves = arbitor.getValidMoves({\n          position: position,\n          prevPosition: previousPosition,\n          castleDirection: \"none\",\n          piece: position[rank][file],\n          rank,\n          file\n        });\n        if (pieceAtPositionValidMoves.some(_ref2 => {\n          let [x, y] = _ref2;\n          return x === toX && y === toY;\n        })) {\n          ambiguousPieces.push({\n            pieceAt: position[rank][file],\n            rank: rank,\n            file: file\n          });\n        }\n      }\n    }\n  }\n  const pieceLetter = piece[1].toUpperCase();\n  const fileChar = getCharacter(currY + 1);\n  const rankChar = (currX + 1).toString();\n  function appendTake(str) {\n    return takes !== \"\" ? str + \"x\" : str;\n  }\n  if (ambiguousPieces.length === 0) {\n    note += appendTake(pieceLetter);\n  } else if (ambiguousPieces.length === 1) {\n    if (ambiguousPieces[0].file !== currY) {\n      note += appendTake(pieceLetter + fileChar);\n    } else {\n      note += appendTake(pieceLetter + rankChar);\n    }\n  } else {\n    let onFile = false;\n    let onRank = false;\n    ambiguousPieces.forEach(ambiguousPiece => {\n      if (ambiguousPiece.file === currY) onFile = true;\n      if (ambiguousPiece.rank === currX) onRank = true;\n    });\n    if (onFile && onRank) {\n      note += appendTake(pieceLetter + fileChar + rankChar);\n    } else if (onFile) {\n      note += appendTake(pieceLetter + rankChar);\n    } else {\n      note += appendTake(pieceLetter + fileChar);\n    }\n  }\n  return note;\n};","map":{"version":3,"names":["arbitor","useAppContext","generateCandidates","getCharacter","file","String","fromCharCode","createPosition","position","Array","fill","map","x","i","copyPosition","newPosition","rank","length","areSameColorTiles","coords1","coords2","y","findPieceCoords","type","results","forEach","pos","j","push","getNewMoveNotation","_ref","piece","previousPosition","promotesTo","note","takes","Number","Math","abs","disambiguateMove","toUpperCase","currX","currY","toX","toY","ambiguousPieces","pieceAtPositionValidMoves","getValidMoves","prevPosition","castleDirection","some","_ref2","pieceAt","pieceLetter","fileChar","rankChar","toString","appendTake","str","onFile","onRank","ambiguousPiece"],"sources":["/home/fred/Desktop/projects/myrepertoire.io/src/helper.js"],"sourcesContent":["import arbitor from \"../src/arbiter/arbiter.js\";\nimport { useAppContext } from \"../src/contexts/Context.js\";\nimport { generateCandidates } from \"../src/reducer/actions/move.js\";\n\nexport const getCharacter = (file) => String.fromCharCode(file + 96);\nexport const createPosition = () => {\n  const position = new Array(8).fill(\"\").map((x) => new Array(8).fill(\"\"));\n\n  for (let i = 0; i < 8; i++) {\n    // position[6][i] = \"bp\";\n    // position[1][i] = \"wp\";\n  }\n\n  // position[0][0] = \"wr\";\n  // position[0][1] = \"wn\";\n  // position[0][2] = \"wb\";\n  // position[0][3] = \"wq\";\n  // position[0][4] = \"wk\";\n  // position[0][5] = \"wb\";\n  // position[0][6] = \"wn\";\n  // position[0][7] = \"wr\";\n  //\n  // position[7][0] = \"br\";\n  // position[7][1] = \"bn\";\n  // position[7][2] = \"bb\";\n  // position[7][3] = \"bq\";\n  // position[7][4] = \"bk\";\n  // position[7][5] = \"bb\";\n  // position[7][6] = \"bn\";\n  // position[7][7] = \"br\";\n\n  position[0][0] = \"bk\";\n  position[0][7] = \"wk\";\n  position[3][2] = \"wn\";\n  position[3][6] = \"wn\";\n  position[5][2] = \"wn\";\n  position[5][6] = \"wn\";\n\n  return position;\n};\n\nexport const copyPosition = (position) => {\n  const newPosition = new Array(8).fill(\"\").map((x) => new Array(8).fill(\"\"));\n\n  for (let rank = 0; rank < position.length; rank++) {\n    for (let file = 0; file < position[0].length; file++) {\n      newPosition[rank][file] = position[rank][file];\n    }\n  }\n\n  return newPosition;\n};\n\nexport const areSameColorTiles = (coords1, coords2) =>\n  (coords1.x + coords1.y) % 2 === coords2.x + coords2.y;\n\nexport const findPieceCoords = (position, type) => {\n  let results = [];\n  position.forEach((rank, i) => {\n    rank.forEach((pos, j) => {\n      if (pos === type) results.push({ x: i, y: j });\n    });\n  });\n  return results;\n};\n\nexport const getNewMoveNotation = ({\n  piece,\n  rank,\n  file,\n  x,\n  y,\n  position,\n  previousPosition,\n  promotesTo,\n}) => {\n  let note = \"\";\n  const takes = position[x][y];\n\n  rank = Number(rank);\n  file = Number(file);\n  if (piece[1] === \"k\" && Math.abs(file - y) === 2) {\n    if (file < y) return \"O-O\";\n    else return \"O-O-O\";\n  }\n\n  if (piece[1] !== \"p\") {\n    note += disambiguateMove(\n      piece,\n      position,\n      previousPosition,\n      rank,\n      file,\n      x,\n      y,\n      note,\n      takes,\n    );\n  } else if (rank !== x && file !== y) {\n    note += getCharacter(file + 1) + \"x\";\n  }\n\n  note += getCharacter(y + 1) + (x + 1);\n\n  if (promotesTo) note += \"=\" + promotesTo.toUpperCase();\n\n  return note;\n};\n\nexport const disambiguateMove = (\n  piece,\n  position,\n  previousPosition,\n  currX,\n  currY,\n  toX,\n  toY,\n  note,\n  takes,\n) => {\n  let ambiguousPieces = [];\n\n  for (let rank = 0; rank < 8; rank++) {\n    for (let file = 0; file < 8; file++) {\n      if (position[rank][file] === \"\" || (rank === currX && file === currY)) {\n        continue;\n      } else if (position[rank][file] === piece) {\n        const pieceAtPositionValidMoves = arbitor.getValidMoves({\n          position: position,\n          prevPosition: previousPosition,\n          castleDirection: \"none\",\n          piece: position[rank][file],\n          rank,\n          file,\n        });\n        if (\n          pieceAtPositionValidMoves.some(([x, y]) => x === toX && y === toY)\n        ) {\n          ambiguousPieces.push({\n            pieceAt: position[rank][file],\n            rank: rank,\n            file: file,\n          });\n        }\n      }\n    }\n  }\n\n  const pieceLetter = piece[1].toUpperCase();\n  const fileChar = getCharacter(currY + 1);\n  const rankChar = (currX + 1).toString();\n\n  function appendTake(str) {\n    return takes !== \"\" ? str + \"x\" : str;\n  }\n\n  if (ambiguousPieces.length === 0) {\n    note += appendTake(pieceLetter);\n  } else if (ambiguousPieces.length === 1) {\n    if (ambiguousPieces[0].file !== currY) {\n      note += appendTake(pieceLetter + fileChar);\n    } else {\n      note += appendTake(pieceLetter + rankChar);\n    }\n  } else {\n    let onFile = false;\n    let onRank = false;\n    ambiguousPieces.forEach((ambiguousPiece) => {\n      if (ambiguousPiece.file === currY) onFile = true;\n      if (ambiguousPiece.rank === currX) onRank = true;\n    });\n\n    if (onFile && onRank) {\n      note += appendTake(pieceLetter + fileChar + rankChar);\n    } else if (onFile) {\n      note += appendTake(pieceLetter + rankChar);\n    } else {\n      note += appendTake(pieceLetter + fileChar);\n    }\n  }\n\n  return note;\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,2BAA2B;AAC/C,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,kBAAkB,QAAQ,gCAAgC;AAEnE,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAKC,MAAM,CAACC,YAAY,CAACF,IAAI,GAAG,EAAE,CAAC;AACpE,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAIH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAExE,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B;IACA;EAAA;;EAGF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAL,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACrBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACrBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACrBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACrBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACrBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EAErB,OAAOA,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMM,YAAY,GAAIN,QAAQ,IAAK;EACxC,MAAMO,WAAW,GAAG,IAAIN,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAIH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAE3E,KAAK,IAAIM,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGR,QAAQ,CAACS,MAAM,EAAED,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIZ,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGI,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,EAAEb,IAAI,EAAE,EAAE;MACpDW,WAAW,CAACC,IAAI,CAAC,CAACZ,IAAI,CAAC,GAAGI,QAAQ,CAACQ,IAAI,CAAC,CAACZ,IAAI,CAAC;IAChD;EACF;EAEA,OAAOW,WAAW;AACpB,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAChD,CAACD,OAAO,CAACP,CAAC,GAAGO,OAAO,CAACE,CAAC,IAAI,CAAC,KAAKD,OAAO,CAACR,CAAC,GAAGQ,OAAO,CAACC,CAAC;AAEvD,OAAO,MAAMC,eAAe,GAAGA,CAACd,QAAQ,EAAEe,IAAI,KAAK;EACjD,IAAIC,OAAO,GAAG,EAAE;EAChBhB,QAAQ,CAACiB,OAAO,CAAC,CAACT,IAAI,EAAEH,CAAC,KAAK;IAC5BG,IAAI,CAACS,OAAO,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MACvB,IAAID,GAAG,KAAKH,IAAI,EAAEC,OAAO,CAACI,IAAI,CAAC;QAAEhB,CAAC,EAAEC,CAAC;QAAEQ,CAAC,EAAEM;MAAE,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOH,OAAO;AAChB,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAGC,IAAA,IAS5B;EAAA,IAT6B;IACjCC,KAAK;IACLf,IAAI;IACJZ,IAAI;IACJQ,CAAC;IACDS,CAAC;IACDb,QAAQ;IACRwB,gBAAgB;IAChBC;EACF,CAAC,GAAAH,IAAA;EACC,IAAII,IAAI,GAAG,EAAE;EACb,MAAMC,KAAK,GAAG3B,QAAQ,CAACI,CAAC,CAAC,CAACS,CAAC,CAAC;EAE5BL,IAAI,GAAGoB,MAAM,CAACpB,IAAI,CAAC;EACnBZ,IAAI,GAAGgC,MAAM,CAAChC,IAAI,CAAC;EACnB,IAAI2B,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIM,IAAI,CAACC,GAAG,CAAClC,IAAI,GAAGiB,CAAC,CAAC,KAAK,CAAC,EAAE;IAChD,IAAIjB,IAAI,GAAGiB,CAAC,EAAE,OAAO,KAAK,CAAC,KACtB,OAAO,OAAO;EACrB;EAEA,IAAIU,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACpBG,IAAI,IAAIK,gBAAgB,CACtBR,KAAK,EACLvB,QAAQ,EACRwB,gBAAgB,EAChBhB,IAAI,EACJZ,IAAI,EACJQ,CAAC,EACDS,CAAC,EACDa,IAAI,EACJC,KACF,CAAC;EACH,CAAC,MAAM,IAAInB,IAAI,KAAKJ,CAAC,IAAIR,IAAI,KAAKiB,CAAC,EAAE;IACnCa,IAAI,IAAI/B,YAAY,CAACC,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG;EACtC;EAEA8B,IAAI,IAAI/B,YAAY,CAACkB,CAAC,GAAG,CAAC,CAAC,IAAIT,CAAC,GAAG,CAAC,CAAC;EAErC,IAAIqB,UAAU,EAAEC,IAAI,IAAI,GAAG,GAAGD,UAAU,CAACO,WAAW,CAAC,CAAC;EAEtD,OAAON,IAAI;AACb,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAGA,CAC9BR,KAAK,EACLvB,QAAQ,EACRwB,gBAAgB,EAChBS,KAAK,EACLC,KAAK,EACLC,GAAG,EACHC,GAAG,EACHV,IAAI,EACJC,KAAK,KACF;EACH,IAAIU,eAAe,GAAG,EAAE;EAExB,KAAK,IAAI7B,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAE,EAAE;IACnC,KAAK,IAAIZ,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAE,EAAE;MACnC,IAAII,QAAQ,CAACQ,IAAI,CAAC,CAACZ,IAAI,CAAC,KAAK,EAAE,IAAKY,IAAI,KAAKyB,KAAK,IAAIrC,IAAI,KAAKsC,KAAM,EAAE;QACrE;MACF,CAAC,MAAM,IAAIlC,QAAQ,CAACQ,IAAI,CAAC,CAACZ,IAAI,CAAC,KAAK2B,KAAK,EAAE;QACzC,MAAMe,yBAAyB,GAAG9C,OAAO,CAAC+C,aAAa,CAAC;UACtDvC,QAAQ,EAAEA,QAAQ;UAClBwC,YAAY,EAAEhB,gBAAgB;UAC9BiB,eAAe,EAAE,MAAM;UACvBlB,KAAK,EAAEvB,QAAQ,CAACQ,IAAI,CAAC,CAACZ,IAAI,CAAC;UAC3BY,IAAI;UACJZ;QACF,CAAC,CAAC;QACF,IACE0C,yBAAyB,CAACI,IAAI,CAACC,KAAA;UAAA,IAAC,CAACvC,CAAC,EAAES,CAAC,CAAC,GAAA8B,KAAA;UAAA,OAAKvC,CAAC,KAAK+B,GAAG,IAAItB,CAAC,KAAKuB,GAAG;QAAA,EAAC,EAClE;UACAC,eAAe,CAACjB,IAAI,CAAC;YACnBwB,OAAO,EAAE5C,QAAQ,CAACQ,IAAI,CAAC,CAACZ,IAAI,CAAC;YAC7BY,IAAI,EAAEA,IAAI;YACVZ,IAAI,EAAEA;UACR,CAAC,CAAC;QACJ;MACF;IACF;EACF;EAEA,MAAMiD,WAAW,GAAGtB,KAAK,CAAC,CAAC,CAAC,CAACS,WAAW,CAAC,CAAC;EAC1C,MAAMc,QAAQ,GAAGnD,YAAY,CAACuC,KAAK,GAAG,CAAC,CAAC;EACxC,MAAMa,QAAQ,GAAG,CAACd,KAAK,GAAG,CAAC,EAAEe,QAAQ,CAAC,CAAC;EAEvC,SAASC,UAAUA,CAACC,GAAG,EAAE;IACvB,OAAOvB,KAAK,KAAK,EAAE,GAAGuB,GAAG,GAAG,GAAG,GAAGA,GAAG;EACvC;EAEA,IAAIb,eAAe,CAAC5B,MAAM,KAAK,CAAC,EAAE;IAChCiB,IAAI,IAAIuB,UAAU,CAACJ,WAAW,CAAC;EACjC,CAAC,MAAM,IAAIR,eAAe,CAAC5B,MAAM,KAAK,CAAC,EAAE;IACvC,IAAI4B,eAAe,CAAC,CAAC,CAAC,CAACzC,IAAI,KAAKsC,KAAK,EAAE;MACrCR,IAAI,IAAIuB,UAAU,CAACJ,WAAW,GAAGC,QAAQ,CAAC;IAC5C,CAAC,MAAM;MACLpB,IAAI,IAAIuB,UAAU,CAACJ,WAAW,GAAGE,QAAQ,CAAC;IAC5C;EACF,CAAC,MAAM;IACL,IAAII,MAAM,GAAG,KAAK;IAClB,IAAIC,MAAM,GAAG,KAAK;IAClBf,eAAe,CAACpB,OAAO,CAAEoC,cAAc,IAAK;MAC1C,IAAIA,cAAc,CAACzD,IAAI,KAAKsC,KAAK,EAAEiB,MAAM,GAAG,IAAI;MAChD,IAAIE,cAAc,CAAC7C,IAAI,KAAKyB,KAAK,EAAEmB,MAAM,GAAG,IAAI;IAClD,CAAC,CAAC;IAEF,IAAID,MAAM,IAAIC,MAAM,EAAE;MACpB1B,IAAI,IAAIuB,UAAU,CAACJ,WAAW,GAAGC,QAAQ,GAAGC,QAAQ,CAAC;IACvD,CAAC,MAAM,IAAII,MAAM,EAAE;MACjBzB,IAAI,IAAIuB,UAAU,CAACJ,WAAW,GAAGE,QAAQ,CAAC;IAC5C,CAAC,MAAM;MACLrB,IAAI,IAAIuB,UAAU,CAACJ,WAAW,GAAGC,QAAQ,CAAC;IAC5C;EACF;EAEA,OAAOpB,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}