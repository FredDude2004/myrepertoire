{"ast":null,"code":"import { copyPosition } from \"../helper\";\nexport const movePiece = _ref => {\n  let {\n    position,\n    piece,\n    rank,\n    file,\n    x,\n    y\n  } = _ref;\n  const newPosition = copyPosition(position);\n  if (piece.endsWith('k') && Math.abs(y - file) > 1) {\n    // Castles\n    if (y === 2) {\n      // Castles Long\n      newPosition[rank][0] = '';\n      newPosition[rank][3] = piece.startsWith('w') ? 'wr' : 'br';\n    }\n    if (y === 6) {\n      // Castles Short\n      newPosition[rank][7] = '';\n      newPosition[rank][5] = piece.startsWith('w') ? 'wr' : 'br';\n    }\n  }\n  newPosition[rank][file] = '';\n  newPosition[x][y] = piece;\n  return newPosition;\n};\nexport const movePawn = _ref2 => {\n  let {\n    position,\n    piece,\n    rank,\n    file,\n    x,\n    y\n  } = _ref2;\n  const newPosition = copyPosition(position);\n\n  // EnPassant, looks like capturing an empty cell\n  // Detect and delete the pawn to be removed\n  if (!newPosition[x][y] && x !== rank && y !== file) newPosition[rank][y] = '';\n  newPosition[rank][file] = '';\n  newPosition[x][y] = piece;\n  return newPosition;\n};","map":{"version":3,"names":["copyPosition","movePiece","_ref","position","piece","rank","file","x","y","newPosition","endsWith","Math","abs","startsWith","movePawn","_ref2"],"sources":["/home/fred/Desktop/projects/myrepertoire.io/src/arbiter/move.js"],"sourcesContent":["import { copyPosition } from \"../helper\"\n\nexport const movePiece = ({position,piece,rank,file,x,y}) => {\n\n    const newPosition = copyPosition(position)\n\n    if(piece.endsWith('k') && Math.abs(y - file) > 1){ // Castles\n        if (y === 2){ // Castles Long\n            newPosition[rank][0] = ''\n            newPosition[rank][3] = piece.startsWith('w') ? 'wr' : 'br'\n        }\n        if (y === 6){ // Castles Short\n            newPosition[rank][7] = ''\n            newPosition[rank][5] = piece.startsWith('w') ? 'wr' : 'br'\n        }\n    }\n    \n    newPosition[rank][file] = ''\n    newPosition[x][y] = piece\n    return newPosition\n}\n\nexport const movePawn = ({position,piece,rank,file,x,y}) => {\n    const newPosition = copyPosition(position)\n\n    // EnPassant, looks like capturing an empty cell\n    // Detect and delete the pawn to be removed\n    if (!newPosition[x][y] && x !== rank && y !== file) \n        newPosition[rank][y] = ''\n\n    newPosition[rank][file] = ''\n    newPosition[x][y] = piece\n    return newPosition\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,WAAW;AAExC,OAAO,MAAMC,SAAS,GAAGC,IAAA,IAAoC;EAAA,IAAnC;IAACC,QAAQ;IAACC,KAAK;IAACC,IAAI;IAACC,IAAI;IAACC,CAAC;IAACC;EAAC,CAAC,GAAAN,IAAA;EAEpD,MAAMO,WAAW,GAAGT,YAAY,CAACG,QAAQ,CAAC;EAE1C,IAAGC,KAAK,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACJ,CAAC,GAAGF,IAAI,CAAC,GAAG,CAAC,EAAC;IAAE;IAC/C,IAAIE,CAAC,KAAK,CAAC,EAAC;MAAE;MACVC,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;MACzBI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGD,KAAK,CAACS,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;IAC9D;IACA,IAAIL,CAAC,KAAK,CAAC,EAAC;MAAE;MACVC,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;MACzBI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGD,KAAK,CAACS,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;IAC9D;EACJ;EAEAJ,WAAW,CAACJ,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,EAAE;EAC5BG,WAAW,CAACF,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGJ,KAAK;EACzB,OAAOK,WAAW;AACtB,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAGC,KAAA,IAAoC;EAAA,IAAnC;IAACZ,QAAQ;IAACC,KAAK;IAACC,IAAI;IAACC,IAAI;IAACC,CAAC;IAACC;EAAC,CAAC,GAAAO,KAAA;EACnD,MAAMN,WAAW,GAAGT,YAAY,CAACG,QAAQ,CAAC;;EAE1C;EACA;EACA,IAAI,CAACM,WAAW,CAACF,CAAC,CAAC,CAACC,CAAC,CAAC,IAAID,CAAC,KAAKF,IAAI,IAAIG,CAAC,KAAKF,IAAI,EAC9CG,WAAW,CAACJ,IAAI,CAAC,CAACG,CAAC,CAAC,GAAG,EAAE;EAE7BC,WAAW,CAACJ,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,EAAE;EAC5BG,WAAW,CAACF,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGJ,KAAK;EACzB,OAAOK,WAAW;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}