{"ast":null,"code":"import arbiter from \"./arbiter\";\nexport const getRookMoves = _ref => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref;\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === \"w\" ? \"b\" : \"w\";\n  const direction = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x = position[x]) === null || _position$x === void 0 ? void 0 : _position$x[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getKnightMoves = _ref2 => {\n  let {\n    position,\n    rank,\n    file\n  } = _ref2;\n  const moves = [];\n  const enemy = position[rank][file].startsWith(\"w\") ? \"b\" : \"w\";\n  const candidates = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];\n  candidates.forEach(c => {\n    var _position;\n    const cell = position === null || position === void 0 ? void 0 : (_position = position[rank + c[0]]) === null || _position === void 0 ? void 0 : _position[file + c[1]];\n    if (cell !== undefined && (cell.startsWith(enemy) || cell === \"\")) {\n      moves.push([rank + c[0], file + c[1]]);\n    }\n  });\n  return moves;\n};\nexport const getBishopMoves = _ref3 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref3;\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === \"w\" ? \"b\" : \"w\";\n  const direction = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x2;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x2 = position[x]) === null || _position$x2 === void 0 ? void 0 : _position$x2[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getQueenMoves = _ref4 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref4;\n  const moves = [...getBishopMoves({\n    position,\n    piece,\n    rank,\n    file\n  }), ...getRookMoves({\n    position,\n    piece,\n    rank,\n    file\n  })];\n  return moves;\n};\nexport const getKingMoves = _ref5 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref5;\n  let moves = [];\n  const us = piece[0];\n  const direction = [[1, -1], [1, 0], [1, 1], [0, -1], [0, 1], [-1, -1], [-1, 0], [-1, 1]];\n  direction.forEach(dir => {\n    var _position$x3;\n    const x = rank + dir[0];\n    const y = file + dir[1];\n    if ((position === null || position === void 0 ? void 0 : (_position$x3 = position[x]) === null || _position$x3 === void 0 ? void 0 : _position$x3[y]) !== undefined && !position[x][y].startsWith(us)) moves.push([x, y]);\n  });\n  return moves;\n};\nexport const getPawnMoves = _ref6 => {\n  var _position4;\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref6;\n  const moves = [];\n  const dir = piece === \"wp\" ? 1 : -1;\n\n  // Move two tiles on first move\n  if (rank % 5 === 1) {\n    var _position2, _position3;\n    if ((position === null || position === void 0 ? void 0 : (_position2 = position[rank + dir]) === null || _position2 === void 0 ? void 0 : _position2[file]) === \"\" && (position === null || position === void 0 ? void 0 : (_position3 = position[rank + dir + dir]) === null || _position3 === void 0 ? void 0 : _position3[file]) === \"\") {\n      moves.push([rank + dir + dir, file]);\n    }\n  }\n\n  // Move one tile\n  if (!(position !== null && position !== void 0 && (_position4 = position[rank + dir]) !== null && _position4 !== void 0 && _position4[file])) {\n    moves.push([rank + dir, file]);\n  }\n  return moves;\n};\nexport const getPawnCaptures = _ref7 => {\n  var _position5, _position6;\n  let {\n    position,\n    prevPosition,\n    piece,\n    rank,\n    file\n  } = _ref7;\n  const moves = [];\n  const dir = piece === \"wp\" ? 1 : -1;\n  const enemy = piece[0] === \"w\" ? \"b\" : \"w\";\n\n  // Capture enemy to left\n  if (position !== null && position !== void 0 && (_position5 = position[rank + dir]) !== null && _position5 !== void 0 && _position5[file - 1] && position[rank + dir][file - 1].startsWith(enemy)) {\n    moves.push([rank + dir, file - 1]);\n  }\n\n  // Capture enemy to right\n  if (position !== null && position !== void 0 && (_position6 = position[rank + dir]) !== null && _position6 !== void 0 && _position6[file + 1] && position[rank + dir][file + 1].startsWith(enemy)) {\n    moves.push([rank + dir, file + 1]);\n  }\n\n  // EnPassant\n  // Check if enemy moved twice in last round\n  const enemyPawn = dir === 1 ? \"bp\" : \"wp\";\n  const adjacentFiles = [file - 1, file + 1];\n  if (prevPosition) {\n    if (dir === 1 && rank === 4 || dir === -1 && rank === 3) {\n      adjacentFiles.forEach(f => {\n        var _position$rank, _position7, _prevPosition$rank, _prevPosition;\n        if ((position === null || position === void 0 ? void 0 : (_position$rank = position[rank]) === null || _position$rank === void 0 ? void 0 : _position$rank[f]) === enemyPawn && (position === null || position === void 0 ? void 0 : (_position7 = position[rank + dir + dir]) === null || _position7 === void 0 ? void 0 : _position7[f]) === \"\" && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition$rank = prevPosition[rank]) === null || _prevPosition$rank === void 0 ? void 0 : _prevPosition$rank[f]) === \"\" && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition = prevPosition[rank + dir + dir]) === null || _prevPosition === void 0 ? void 0 : _prevPosition[f]) === enemyPawn) {\n          moves.push([rank + dir, f]);\n        }\n      });\n    }\n  }\n  return moves;\n};\nexport const getCastlingMoves = _ref8 => {\n  let {\n    position,\n    castleDirection,\n    piece,\n    rank,\n    file\n  } = _ref8;\n  const moves = [];\n  if (file !== 4 || rank % 7 !== 0 || castleDirection === \"none\") {\n    return moves;\n  }\n  if (piece.startsWith(\"w\")) {\n    if (arbiter.isPlayerInCheck({\n      positionAfterMove: position,\n      player: \"w\"\n    })) return moves;\n    if ([\"left\", \"both\"].includes(castleDirection) && !position[0][3] && !position[0][2] && !position[0][1] && position[0][0] === \"wr\" && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 3\n      }),\n      player: \"w\"\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 2\n      }),\n      player: \"w\"\n    })) {\n      moves.push([0, 2]);\n    }\n    if ([\"right\", \"both\"].includes(castleDirection) && !position[0][5] && !position[0][6] && position[0][7] === \"wr\" && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 5\n      }),\n      player: \"w\"\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 6\n      }),\n      player: \"w\"\n    })) {\n      moves.push([0, 6]);\n    }\n  } else {\n    if (arbiter.isPlayerInCheck({\n      positionAfterMove: position,\n      player: \"b\"\n    })) return moves;\n    if ([\"left\", \"both\"].includes(castleDirection) && !position[7][3] && !position[7][2] && !position[7][1] && position[7][0] === \"br\" && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 3\n      }),\n      position: position,\n      player: \"b\"\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 2\n      }),\n      position: position,\n      player: \"b\"\n    })) {\n      moves.push([7, 2]);\n    }\n    if ([\"right\", \"both\"].includes(castleDirection) && !position[7][5] && !position[7][6] && position[7][7] === \"br\" && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 5\n      }),\n      position: position,\n      player: \"b\"\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 6\n      }),\n      position: position,\n      player: \"b\"\n    })) {\n      moves.push([7, 6]);\n    }\n  }\n  return moves;\n};\nexport const getCastlingDirections = _ref9 => {\n  let {\n    castleDirection,\n    piece,\n    file,\n    rank\n  } = _ref9;\n  file = Number(file);\n  rank = Number(rank);\n  const direction = castleDirection[piece[0]];\n  if (piece.endsWith(\"k\")) return \"none\";\n  if (file === 0 && rank === 0) {\n    if (direction === \"both\") return \"right\";\n    if (direction === \"left\") return \"none\";\n  }\n  if (file === 7 && rank === 0) {\n    if (direction === \"both\") return \"left\";\n    if (direction === \"right\") return \"none\";\n  }\n  if (file === 0 && rank === 7) {\n    if (direction === \"both\") return \"right\";\n    if (direction === \"left\") return \"none\";\n  }\n  if (file === 7 && rank === 7) {\n    if (direction === \"both\") return \"left\";\n    if (direction === \"right\") return \"none\";\n  }\n};\nexport const getPieces = (position, enemy) => {\n  const enemyPieces = [];\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(enemy)) enemyPieces.push({\n        piece: position[x][y],\n        rank: x,\n        file: y\n      });\n    });\n  });\n  return enemyPieces;\n};\nexport const getKingPosition = (position, player) => {\n  let kingPos;\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(player) && position[x][y].endsWith(\"k\")) kingPos = [x, y];\n    });\n  });\n  return kingPos;\n};","map":{"version":3,"names":["arbiter","getRookMoves","_ref","position","piece","rank","file","moves","us","enemy","direction","forEach","dir","i","_position$x","x","y","undefined","startsWith","push","getKnightMoves","_ref2","candidates","c","_position","cell","getBishopMoves","_ref3","_position$x2","getQueenMoves","_ref4","getKingMoves","_ref5","_position$x3","getPawnMoves","_ref6","_position4","_position2","_position3","getPawnCaptures","_ref7","_position5","_position6","prevPosition","enemyPawn","adjacentFiles","f","_position$rank","_position7","_prevPosition$rank","_prevPosition","getCastlingMoves","_ref8","castleDirection","isPlayerInCheck","positionAfterMove","player","includes","performMove","getCastlingDirections","_ref9","Number","endsWith","getPieces","enemyPieces","getKingPosition","kingPos"],"sources":["/home/fred/Desktop/projects/myrepertoire.io/src/arbiter/getMoves.js"],"sourcesContent":["import arbiter from \"./arbiter\";\n\nexport const getRookMoves = ({ position, piece, rank, file }) => {\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === \"w\" ? \"b\" : \"w\";\n\n  const direction = [\n    [-1, 0],\n    [1, 0],\n    [0, -1],\n    [0, 1],\n  ];\n\n  direction.forEach((dir) => {\n    for (let i = 1; i <= 8; i++) {\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if (position?.[x]?.[y] === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n\n  return moves;\n};\n\nexport const getKnightMoves = ({ position, rank, file }) => {\n  const moves = [];\n  const enemy = position[rank][file].startsWith(\"w\") ? \"b\" : \"w\";\n\n  const candidates = [\n    [-2, -1],\n    [-2, 1],\n    [-1, -2],\n    [-1, 2],\n    [1, -2],\n    [1, 2],\n    [2, -1],\n    [2, 1],\n  ];\n  candidates.forEach((c) => {\n    const cell = position?.[rank + c[0]]?.[file + c[1]];\n    if (cell !== undefined && (cell.startsWith(enemy) || cell === \"\")) {\n      moves.push([rank + c[0], file + c[1]]);\n    }\n  });\n  return moves;\n};\n\nexport const getBishopMoves = ({ position, piece, rank, file }) => {\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === \"w\" ? \"b\" : \"w\";\n\n  const direction = [\n    [-1, -1],\n    [-1, 1],\n    [1, -1],\n    [1, 1],\n  ];\n\n  direction.forEach((dir) => {\n    for (let i = 1; i <= 8; i++) {\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if (position?.[x]?.[y] === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\n\nexport const getQueenMoves = ({ position, piece, rank, file }) => {\n  const moves = [\n    ...getBishopMoves({ position, piece, rank, file }),\n    ...getRookMoves({ position, piece, rank, file }),\n  ];\n\n  return moves;\n};\n\nexport const getKingMoves = ({ position, piece, rank, file }) => {\n  let moves = [];\n  const us = piece[0];\n  const direction = [\n    [1, -1],\n    [1, 0],\n    [1, 1],\n    [0, -1],\n    [0, 1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n  ];\n\n  direction.forEach((dir) => {\n    const x = rank + dir[0];\n    const y = file + dir[1];\n    if (position?.[x]?.[y] !== undefined && !position[x][y].startsWith(us))\n      moves.push([x, y]);\n  });\n  return moves;\n};\n\nexport const getPawnMoves = ({ position, piece, rank, file }) => {\n  const moves = [];\n  const dir = piece === \"wp\" ? 1 : -1;\n\n  // Move two tiles on first move\n  if (rank % 5 === 1) {\n    if (\n      position?.[rank + dir]?.[file] === \"\" &&\n      position?.[rank + dir + dir]?.[file] === \"\"\n    ) {\n      moves.push([rank + dir + dir, file]);\n    }\n  }\n\n  // Move one tile\n  if (!position?.[rank + dir]?.[file]) {\n    moves.push([rank + dir, file]);\n  }\n\n  return moves;\n};\n\nexport const getPawnCaptures = ({\n  position,\n  prevPosition,\n  piece,\n  rank,\n  file,\n}) => {\n  const moves = [];\n  const dir = piece === \"wp\" ? 1 : -1;\n  const enemy = piece[0] === \"w\" ? \"b\" : \"w\";\n\n  // Capture enemy to left\n  if (\n    position?.[rank + dir]?.[file - 1] &&\n    position[rank + dir][file - 1].startsWith(enemy)\n  ) {\n    moves.push([rank + dir, file - 1]);\n  }\n\n  // Capture enemy to right\n  if (\n    position?.[rank + dir]?.[file + 1] &&\n    position[rank + dir][file + 1].startsWith(enemy)\n  ) {\n    moves.push([rank + dir, file + 1]);\n  }\n\n  // EnPassant\n  // Check if enemy moved twice in last round\n  const enemyPawn = dir === 1 ? \"bp\" : \"wp\";\n  const adjacentFiles = [file - 1, file + 1];\n  if (prevPosition) {\n    if ((dir === 1 && rank === 4) || (dir === -1 && rank === 3)) {\n      adjacentFiles.forEach((f) => {\n        if (\n          position?.[rank]?.[f] === enemyPawn &&\n          position?.[rank + dir + dir]?.[f] === \"\" &&\n          prevPosition?.[rank]?.[f] === \"\" &&\n          prevPosition?.[rank + dir + dir]?.[f] === enemyPawn\n        ) {\n          moves.push([rank + dir, f]);\n        }\n      });\n    }\n  }\n\n  return moves;\n};\n\nexport const getCastlingMoves = ({\n  position,\n  castleDirection,\n  piece,\n  rank,\n  file,\n}) => {\n  const moves = [];\n\n  if (file !== 4 || rank % 7 !== 0 || castleDirection === \"none\") {\n    return moves;\n  }\n  if (piece.startsWith(\"w\")) {\n    if (\n      arbiter.isPlayerInCheck({\n        positionAfterMove: position,\n        player: \"w\",\n      })\n    )\n      return moves;\n\n    if (\n      [\"left\", \"both\"].includes(castleDirection) &&\n      !position[0][3] &&\n      !position[0][2] &&\n      !position[0][1] &&\n      position[0][0] === \"wr\" &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 0,\n          y: 3,\n        }),\n        player: \"w\",\n      }) &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 0,\n          y: 2,\n        }),\n        player: \"w\",\n      })\n    ) {\n      moves.push([0, 2]);\n    }\n    if (\n      [\"right\", \"both\"].includes(castleDirection) &&\n      !position[0][5] &&\n      !position[0][6] &&\n      position[0][7] === \"wr\" &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 0,\n          y: 5,\n        }),\n        player: \"w\",\n      }) &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 0,\n          y: 6,\n        }),\n        player: \"w\",\n      })\n    ) {\n      moves.push([0, 6]);\n    }\n  } else {\n    if (\n      arbiter.isPlayerInCheck({\n        positionAfterMove: position,\n        player: \"b\",\n      })\n    )\n      return moves;\n\n    if (\n      [\"left\", \"both\"].includes(castleDirection) &&\n      !position[7][3] &&\n      !position[7][2] &&\n      !position[7][1] &&\n      position[7][0] === \"br\" &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 7,\n          y: 3,\n        }),\n        position: position,\n        player: \"b\",\n      }) &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 7,\n          y: 2,\n        }),\n        position: position,\n        player: \"b\",\n      })\n    ) {\n      moves.push([7, 2]);\n    }\n    if (\n      [\"right\", \"both\"].includes(castleDirection) &&\n      !position[7][5] &&\n      !position[7][6] &&\n      position[7][7] === \"br\" &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 7,\n          y: 5,\n        }),\n        position: position,\n        player: \"b\",\n      }) &&\n      !arbiter.isPlayerInCheck({\n        positionAfterMove: arbiter.performMove({\n          position,\n          piece,\n          rank,\n          file,\n          x: 7,\n          y: 6,\n        }),\n        position: position,\n        player: \"b\",\n      })\n    ) {\n      moves.push([7, 6]);\n    }\n  }\n\n  return moves;\n};\n\nexport const getCastlingDirections = ({\n  castleDirection,\n  piece,\n  file,\n  rank,\n}) => {\n  file = Number(file);\n  rank = Number(rank);\n  const direction = castleDirection[piece[0]];\n  if (piece.endsWith(\"k\")) return \"none\";\n\n  if (file === 0 && rank === 0) {\n    if (direction === \"both\") return \"right\";\n    if (direction === \"left\") return \"none\";\n  }\n  if (file === 7 && rank === 0) {\n    if (direction === \"both\") return \"left\";\n    if (direction === \"right\") return \"none\";\n  }\n  if (file === 0 && rank === 7) {\n    if (direction === \"both\") return \"right\";\n    if (direction === \"left\") return \"none\";\n  }\n  if (file === 7 && rank === 7) {\n    if (direction === \"both\") return \"left\";\n    if (direction === \"right\") return \"none\";\n  }\n};\n\nexport const getPieces = (position, enemy) => {\n  const enemyPieces = [];\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(enemy))\n        enemyPieces.push({\n          piece: position[x][y],\n          rank: x,\n          file: y,\n        });\n    });\n  });\n  return enemyPieces;\n};\n\nexport const getKingPosition = (position, player) => {\n  let kingPos;\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(player) && position[x][y].endsWith(\"k\"))\n        kingPos = [x, y];\n    });\n  });\n  return kingPos;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}