{"ast":null,"code":"import { Status } from \"../constants\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.NEW_MOVE:\n      {\n        let {\n          position,\n          movesList,\n          moveNum,\n          turn,\n          castleDirection,\n          castleDirectionHistory\n        } = state;\n        position = [...position, action.payload.newPosition];\n        movesList = [...movesList, action.payload.newMove];\n        turn = turn === 'w' ? 'b' : 'w';\n        moveNum = turn === 'w' ? moveNum + 1 : moveNum;\n        castleDirectionHistory = [...castleDirectionHistory, {\n          ...castleDirection\n        } // deep enough for this structure\n        ];\n        return {\n          ...state,\n          position,\n          movesList,\n          turn,\n          castleDirectionHistory\n        };\n      }\n    case actionTypes.GENERATE_CANDIDATE_MOVES:\n      {\n        const {\n          candidateMoves\n        } = action.payload;\n        return {\n          ...state,\n          candidateMoves\n        };\n      }\n    case actionTypes.CLEAR_CANDIDATE_MOVES:\n      {\n        return {\n          ...state,\n          candidateMoves: []\n        };\n      }\n    case actionTypes.PROMOTION_OPEN:\n      {\n        return {\n          ...state,\n          status: Status.promoting,\n          promotionSquare: {\n            ...action.payload\n          }\n        };\n      }\n    case actionTypes.PROMOTION_CLOSE:\n      {\n        return {\n          ...state,\n          status: Status.ongoing,\n          promotionSquare: null\n        };\n      }\n    case actionTypes.CAN_CASTLE:\n      {\n        let {\n          turn,\n          castleDirection\n        } = state;\n        const newCastleDirection = {\n          ...castleDirection,\n          [turn]: action.payload\n        };\n        return {\n          ...state,\n          castleDirection: newCastleDirection\n        };\n      }\n    case actionTypes.STALEMATE:\n      {\n        return {\n          ...state,\n          status: Status.stalemate\n        };\n      }\n    case actionTypes.INSUFFICIENT_MATERIAL:\n      {\n        return {\n          ...state,\n          status: Status.insufficient\n        };\n      }\n    case actionTypes.WIN:\n      {\n        return {\n          ...state,\n          status: action.payload === 'w' ? Status.white : Status.black\n        };\n      }\n    case actionTypes.NEW_GAME:\n      {\n        return {\n          ...action.payload\n        };\n      }\n    case actionTypes.TAKE_BACK:\n      {\n        let {\n          position,\n          movesList,\n          turn,\n          moveNum,\n          castleDirection,\n          castleDirectionHistory\n        } = state;\n        if (position.length > 1) {\n          position = position.slice(0, position.length - 1);\n          movesList = movesList.slice(0, movesList.length - 1);\n          turn = turn === 'w' ? 'b' : 'w';\n          moveNum = turn === 'w' ? moveNum - 1 : moveNum;\n          castleDirectionHistory = castleDirectionHistory.slice(0, castleDirectionHistory.length - 1);\n          castleDirection = castleDirectionHistory[castleDirectionHistory.length - 1];\n        }\n        return {\n          ...state,\n          position,\n          movesList,\n          turn,\n          castleDirection,\n          castleDirectionHistory\n        };\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["Status","actionTypes","reducer","state","action","type","NEW_MOVE","position","movesList","moveNum","turn","castleDirection","castleDirectionHistory","payload","newPosition","newMove","GENERATE_CANDIDATE_MOVES","candidateMoves","CLEAR_CANDIDATE_MOVES","PROMOTION_OPEN","status","promoting","promotionSquare","PROMOTION_CLOSE","ongoing","CAN_CASTLE","newCastleDirection","STALEMATE","stalemate","INSUFFICIENT_MATERIAL","insufficient","WIN","white","black","NEW_GAME","TAKE_BACK","length","slice"],"sources":["/home/fred/Desktop/projects/myrepertoire.io/frontend/src/reducer/reducer.js"],"sourcesContent":["import { Status } from \"../constants\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n\n    switch (action.type) {\n        case actionTypes.NEW_MOVE: {\n            let { position, movesList, moveNum, turn, castleDirection, castleDirectionHistory } = state\n            position = [\n                ...position,\n                action.payload.newPosition\n            ]\n            movesList = [\n                ...movesList,\n                action.payload.newMove\n            ]\n            turn = turn === 'w' ? 'b' : 'w'\n            moveNum = turn === 'w' ? moveNum + 1 : moveNum;\n            castleDirectionHistory = [\n                ...castleDirectionHistory,\n                { ...castleDirection }  // deep enough for this structure\n            ]\n\n            return {\n                ...state,\n                position,\n                movesList,\n                turn,\n                castleDirectionHistory,\n            }\n        }\n\n        case actionTypes.GENERATE_CANDIDATE_MOVES: {\n            const { candidateMoves } = action.payload\n            return {\n                ...state,\n                candidateMoves\n            }\n        }\n\n        case actionTypes.CLEAR_CANDIDATE_MOVES: {\n            return {\n                ...state,\n                candidateMoves: []\n            }\n        }\n\n        case actionTypes.PROMOTION_OPEN: {\n            return {\n                ...state,\n                status: Status.promoting,\n                promotionSquare: { ...action.payload },\n            }\n        }\n\n        case actionTypes.PROMOTION_CLOSE: {\n            return {\n                ...state,\n                status: Status.ongoing,\n                promotionSquare: null,\n            }\n        }\n\n        case actionTypes.CAN_CASTLE: {\n            let { turn, castleDirection } = state\n\n            const newCastleDirection = {\n                ...castleDirection,\n                [turn]: action.payload\n            }\n\n            return {\n                ...state,\n                castleDirection: newCastleDirection,\n            }\n        }\n\n        case actionTypes.STALEMATE: {\n            return {\n                ...state,\n                status: Status.stalemate\n            }\n        }\n\n        case actionTypes.INSUFFICIENT_MATERIAL: {\n            return {\n                ...state,\n                status: Status.insufficient\n            }\n        }\n\n        case actionTypes.WIN: {\n            return {\n                ...state,\n                status: action.payload === 'w' ? Status.white : Status.black\n            }\n        }\n\n        case actionTypes.NEW_GAME: {\n            return {\n                ...action.payload,\n            }\n        }\n\n        case actionTypes.TAKE_BACK: {\n            let { position, movesList, turn, moveNum, castleDirection, castleDirectionHistory } = state\n            if (position.length > 1) {\n                position = position.slice(0, position.length - 1)\n                movesList = movesList.slice(0, movesList.length - 1)\n                turn = turn === 'w' ? 'b' : 'w'\n                moveNum = turn === 'w' ? moveNum - 1 : moveNum;\n                castleDirectionHistory = castleDirectionHistory.slice(0, castleDirectionHistory.length - 1);\n                castleDirection = castleDirectionHistory[castleDirectionHistory.length - 1];\n            }\n\n            return {\n                ...state,\n                position,\n                movesList,\n                turn,\n                castleDirection,\n                castleDirectionHistory,\n            }\n        }\n\n        default:\n            return state\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}