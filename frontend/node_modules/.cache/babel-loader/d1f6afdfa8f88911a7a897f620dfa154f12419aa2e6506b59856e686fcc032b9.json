{"ast":null,"code":"import { areSameColorTiles, findPieceCoords } from \"../helper\";\nimport { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves, getPieces, getKingPosition } from \"./getMoves\";\nimport { movePiece, movePawn } from \"./move\";\nconst arbiter = {\n  getRegularMoves: function (_ref) {\n    let {\n      position,\n      piece,\n      rank,\n      file\n    } = _ref;\n    if (piece.endsWith(\"n\")) return getKnightMoves({\n      position,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"b\")) return getBishopMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"r\")) return getRookMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"q\")) return getQueenMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"k\")) return getKingMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"p\")) return getPawnMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n  },\n  getValidMoves: function (_ref2) {\n    let {\n      position,\n      castleDirection,\n      prevPosition,\n      piece,\n      rank,\n      file\n    } = _ref2;\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    const notInCheckMoves = [];\n    if (piece.endsWith(\"p\")) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    if (piece.endsWith(\"k\")) moves = [...moves, ...getCastlingMoves({\n      position,\n      castleDirection,\n      piece,\n      rank,\n      file\n    })];\n    moves.forEach(_ref3 => {\n      let [x, y] = _ref3;\n      const positionAfterMove = this.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y\n      });\n      if (!this.isPlayerInCheck({\n        positionAfterMove,\n        position,\n        player: piece[0]\n      })) {\n        notInCheckMoves.push([x, y]);\n      }\n    });\n    return notInCheckMoves;\n  },\n  isPlayerInCheck: function (_ref4) {\n    let {\n      positionAfterMove,\n      position,\n      player\n    } = _ref4;\n    const enemy = player.startsWith(\"w\") ? \"b\" : \"w\";\n    let kingPos = getKingPosition(positionAfterMove, player);\n    const enemyPieces = getPieces(positionAfterMove, enemy);\n    const enemyMoves = enemyPieces.reduce((acc, p) => acc = [...acc, ...(p.piece.endsWith(\"p\") ? getPawnCaptures({\n      position: positionAfterMove,\n      prevPosition: position,\n      ...p\n    }) : this.getRegularMoves({\n      position: positionAfterMove,\n      ...p\n    }))], []);\n    if (enemyMoves.some(_ref5 => {\n      let [x, y] = _ref5;\n      return kingPos[0] === x && kingPos[1] === y;\n    })) return true;else return false;\n  },\n  performMove: function (_ref6) {\n    let {\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    } = _ref6;\n    if (piece.endsWith(\"p\")) return movePawn({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });else return movePiece({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });\n  },\n  isStalemate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player\n    });\n    if (isInCheck) return false;\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce((acc, p) => acc = [...acc, ...this.getValidMoves({\n      position,\n      castleDirection,\n      ...p\n    })], []);\n    return !isInCheck && moves.length === 0;\n  },\n  insufficientMaterial: function (position) {\n    const pieces = position.reduce((acc, rank) => acc = [...acc, ...rank.filter(spot => spot)], []);\n\n    // King vs. king\n    if (pieces.length === 2) return true;\n\n    // King and bishop vs. king\n    // King and knight vs. king\n    if (pieces.length === 3 && pieces.some(p => p.endsWith(\"b\") || p.endsWith(\"n\"))) return true;\n\n    // King and bishop vs. king and bishop of the same color as the opponent's bishop\n    if (pieces.length === 4 && pieces.every(p => p.endsWith(\"b\") || p.endsWith(\"k\")) && new Set(pieces).size === 4 && areSameColorTiles(findPieceCoords(position, \"wb\")[0], findPieceCoords(position, \"bb\")[0])) return true;\n    return false;\n  },\n  isCheckMate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player\n    });\n    if (!isInCheck) return false;\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce((acc, p) => acc = [...acc, ...this.getValidMoves({\n      position,\n      castleDirection,\n      ...p\n    })], []);\n    return isInCheck && moves.length === 0;\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["areSameColorTiles","findPieceCoords","getKnightMoves","getRookMoves","getBishopMoves","getQueenMoves","getKingMoves","getPawnMoves","getPawnCaptures","getCastlingMoves","getPieces","getKingPosition","movePiece","movePawn","arbiter","getRegularMoves","_ref","position","piece","rank","file","endsWith","getValidMoves","_ref2","castleDirection","prevPosition","moves","notInCheckMoves","forEach","_ref3","x","y","positionAfterMove","performMove","isPlayerInCheck","player","push","_ref4","enemy","startsWith","kingPos","enemyPieces","enemyMoves","reduce","acc","p","some","_ref5","_ref6","isStalemate","isInCheck","pieces","length","insufficientMaterial","filter","spot","every","Set","size","isCheckMate"],"sources":["/home/fred/Desktop/projects/myrepertoire.io/src/arbiter/arbiter.js"],"sourcesContent":["import { areSameColorTiles, findPieceCoords } from \"../helper\";\nimport {\n  getKnightMoves,\n  getRookMoves,\n  getBishopMoves,\n  getQueenMoves,\n  getKingMoves,\n  getPawnMoves,\n  getPawnCaptures,\n  getCastlingMoves,\n  getPieces,\n  getKingPosition,\n} from \"./getMoves\";\nimport { movePiece, movePawn } from \"./move\";\n\nconst arbiter = {\n  getRegularMoves: function ({ position, piece, rank, file }) {\n    if (piece.endsWith(\"n\")) return getKnightMoves({ position, rank, file });\n    if (piece.endsWith(\"b\"))\n      return getBishopMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"r\"))\n      return getRookMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"q\"))\n      return getQueenMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"k\"))\n      return getKingMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"p\"))\n      return getPawnMoves({ position, piece, rank, file });\n  },\n\n  getValidMoves: function ({\n    position,\n    castleDirection,\n    prevPosition,\n    piece,\n    rank,\n    file,\n  }) {\n    let moves = this.getRegularMoves({ position, piece, rank, file });\n    const notInCheckMoves = [];\n\n    if (piece.endsWith(\"p\")) {\n      moves = [\n        ...moves,\n        ...getPawnCaptures({ position, prevPosition, piece, rank, file }),\n      ];\n    }\n    if (piece.endsWith(\"k\"))\n      moves = [\n        ...moves,\n        ...getCastlingMoves({ position, castleDirection, piece, rank, file }),\n      ];\n\n    moves.forEach(([x, y]) => {\n      const positionAfterMove = this.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y,\n      });\n\n      if (\n        !this.isPlayerInCheck({ positionAfterMove, position, player: piece[0] })\n      ) {\n        notInCheckMoves.push([x, y]);\n      }\n    });\n    return notInCheckMoves;\n  },\n\n  isPlayerInCheck: function ({ positionAfterMove, position, player }) {\n    const enemy = player.startsWith(\"w\") ? \"b\" : \"w\";\n    let kingPos = getKingPosition(positionAfterMove, player);\n    const enemyPieces = getPieces(positionAfterMove, enemy);\n\n    const enemyMoves = enemyPieces.reduce(\n      (acc, p) =>\n        (acc = [\n          ...acc,\n          ...(p.piece.endsWith(\"p\")\n            ? getPawnCaptures({\n                position: positionAfterMove,\n                prevPosition: position,\n                ...p,\n              })\n            : this.getRegularMoves({\n                position: positionAfterMove,\n                ...p,\n              })),\n        ]),\n      [],\n    );\n\n    if (enemyMoves.some(([x, y]) => kingPos[0] === x && kingPos[1] === y))\n      return true;\n    else return false;\n  },\n\n  performMove: function ({ position, piece, rank, file, x, y }) {\n    if (piece.endsWith(\"p\"))\n      return movePawn({ position, piece, rank, file, x, y });\n    else return movePiece({ position, piece, rank, file, x, y });\n  },\n\n  isStalemate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player,\n    });\n\n    if (isInCheck) return false;\n\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce(\n      (acc, p) =>\n        (acc = [\n          ...acc,\n          ...this.getValidMoves({\n            position,\n            castleDirection,\n            ...p,\n          }),\n        ]),\n      [],\n    );\n\n    return !isInCheck && moves.length === 0;\n  },\n\n  insufficientMaterial: function (position) {\n    const pieces = position.reduce(\n      (acc, rank) => (acc = [...acc, ...rank.filter((spot) => spot)]),\n      [],\n    );\n\n    // King vs. king\n    if (pieces.length === 2) return true;\n\n    // King and bishop vs. king\n    // King and knight vs. king\n    if (\n      pieces.length === 3 &&\n      pieces.some((p) => p.endsWith(\"b\") || p.endsWith(\"n\"))\n    )\n      return true;\n\n    // King and bishop vs. king and bishop of the same color as the opponent's bishop\n    if (\n      pieces.length === 4 &&\n      pieces.every((p) => p.endsWith(\"b\") || p.endsWith(\"k\")) &&\n      new Set(pieces).size === 4 &&\n      areSameColorTiles(\n        findPieceCoords(position, \"wb\")[0],\n        findPieceCoords(position, \"bb\")[0],\n      )\n    )\n      return true;\n\n    return false;\n  },\n\n  isCheckMate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player,\n    });\n\n    if (!isInCheck) return false;\n\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce(\n      (acc, p) =>\n        (acc = [\n          ...acc,\n          ...this.getValidMoves({\n            position,\n            castleDirection,\n            ...p,\n          }),\n        ]),\n      [],\n    );\n\n    return isInCheck && moves.length === 0;\n  },\n};\n\nexport default arbiter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}